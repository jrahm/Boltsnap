
Command Protocol
================
 
|
| The purpose of this document is to describe both the C to C binary
| protocol and the JavaScript to C XML protocol of a command as well
| as to provide a clear understanding of how a command is issued to
| the boltsnap daemon and dispatched on the server.
|

The layout of the command as of version 0.2.04
----------------------------------------------

	|
	| Generally speaking, a command is a set of bytes that tells the
	| Boltsnap server what to do. The command consists of two parts:
	| a header, and a packet.
	|
	| The header contains information about the format of the packet. e.g.
	| the type of command, size of the packet etc.
	|
	| The packet contains information specific to the command type. For example,
	| if the command type is a play command, then the packet contains the filename
	| to play. If the command type is a pause command, there may be no information
	| int the packet.
	|

	Binary Version
	----------------

		| Every command in boltsnap consists of a 104-bit header that contains information
		| about the rest of the command.
		|
		| The first part of the command is a protocol version. The protocol version denotes
		| to the daemon if the command is compatible with the daemon.
		|
		| The second part of the command is an 8-bit type. The daemon determines from the type
		| what set of functions to use to decode and dispatch the packet.
		|
		| Next is a type extension. The type extension is used by the daemon, and specifically
		| the packet decoders to decide how to decode the packet. This is useful for types
		| that have multiple sub-types
		|
		| The last value is the packet size. This tells the server how large the packet is
		| (in bytes)
		|
		| The layout of the command is as follows:

		+------------------+------------------+-------------------+------------------+
		| Protocol Version | Command-Type     | Type Extension    | Packet Size      |
		|  32-bit unsigned |  8-bit  unsigned |   32-bit signed   |  32-bit unsigned |
		+------------------+------------------+-------------------+------------------+

		| The way the packet is sent with the header is a little more complex.
		| 
		| The header is preceeded by the hex value 0xAF This ensures the daemone is
		| reading the start of the header and not just a random value. It is a simple
		| form of error checking. If the 0xAF is not the first byte, it is discarded and
		| a warning is printed.
		| 
		| Next comes the 104-bit command header whose layout is described above.
		| 
		| Following the header comes a 64-bit hash of the header generated by 
		| boltsnap_command_hash( struct boltsnap_command* ) implemented in 
		| boltsnap_command.c if this pre-computed hash does not exactly match
		| what the server generates, the command header is discarded and a warning
		| is printed
		|
		| Following the hash value there is the hex value 0xFA, this is just a form
		| of simple error checking, but if the value is not there then the command 
		| header is discared and a warning is printed to the screen.
		|
		| Following the hex value 0xFA, the packet follows. The size of the packet
		| is defined in the header and the header will read that many bytes in.
		| As of version 0.02.04, the maximum size of the packet is 256 bytes. If the
		| packet requires more information it is possible that the packet-specific
		| protocol contains a mechanism to allow for larger packets. Any extra information
		| that the packet requires (e.g. a filename) directly follows the packet.
		|
		| The final value in the total command packet is the hex value 0xAF. This value
		| is a form of simple error checking. If this value is not at the end, the
		| packet and the header are discarded without being dispatched.
		| 
		| The layout of the total command packet is as follows:

		+-----------+---------+---------+-----------+--------+-----------+
		| Hex Value | Command | Command | Hex Value | Packet | Hex Value |
		|  0xAF     |  Header |   Hash  |   0xFA    |        |   0xAF    |
		+-----------+---------+---------+-----------+--------+-----------+
		  
		| * The value of all integer types should be in little-endian format
		|   (this may change in future versions to network standard)
	
	C Struct
	--------

		| /*
		|  * struct which contains information
		|  * to communicate with the running daemon
		|  */
		| typedef struct boltsnap_command {
		|     /* version of this protocol */
		|     uint32_t version;
		| 
		|     /* the type of command. Determines which of
		|         the following to use */
		|     enum command_type type;
		| 	
		| 	/* an extension of the type
		| 		for use with custom commands */
		| 	uint32_t extension;
		| 
		|     /* size of the following packet
		|         data */
		| 	uint32_t packet_size;
		| 
		| 	/* a handle to the entry in the table
		| 		if it exists */
		| 	const struct cmdtbl_entry*
		| 		table_entry;
		| 
		| 	/* the packet sent. This
		| 		should arrive as null
		| 		and be set to the struct
		| 		that follows after */
		| 	void* packet;
		| }
		 
